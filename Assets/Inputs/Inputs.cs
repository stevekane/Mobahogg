//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6fc85bd8-1abb-4528-bd50-a61361d319aa"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5dc7827f-deb5-4c28-8a05-7e68a66e5277"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ea21c06c-3827-4c77-86dd-c0c8a91995e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""f365a451-b99f-4c50-8d50-2aa4170f6179"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""be552001-c555-4e16-8b30-591f3c8a7238"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""4e5f4ae2-cbeb-46e7-a25d-ffee2db20d37"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast Spell"",
                    ""type"": ""Button"",
                    ""id"": ""dbcddc00-58af-4a27-962d-9535cee7ad09"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f874fff-b17a-46e5-9901-de00c04f5ce2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""300b71dc-0349-40b8-8c68-17f5d8dda995"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9df05c4c-ad61-4f26-805d-e2de7fc93a88"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cf94f191-8a92-4545-9554-8357967c713c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2af84c0-66c8-4e9c-a866-e21b0b28eb1d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fd08002b-76da-4ca8-96ce-5a3203bcec00"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f5c7c5cd-72f1-425d-8173-e83468258d09"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47887da3-956b-47f6-835b-f53ed93558ba"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89561d9a-2e3a-4e00-b442-2ce248a3f568"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f54a66b-876a-405e-aada-76c9e5e06036"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad8c103-b182-4161-89d3-c7cf41538fd9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""079defbb-63e5-478e-ac9a-9bb377d05b96"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""600666ff-7010-48ac-beae-2435c1d138d1"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1140e8a-742c-43d2-83e6-4f0ec4ee180e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6b4dcf3-e51b-4f58-9d94-acf53bd5e761"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""324329bf-c299-4d70-b27c-ee2a91c10323"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TitleScreen"",
            ""id"": ""5a97e697-8ecb-48ee-a256-76d51f135d54"",
            ""actions"": [
                {
                    ""name"": ""StartMatch"",
                    ""type"": ""Button"",
                    ""id"": ""d413e98b-cced-45b5-933e-91c7471b8951"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5bef909-d254-4c41-89a5-ac8198d06cbd"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMatch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MatchSetup"",
            ""id"": ""9968ff93-a537-49be-9d53-ee898a11e174"",
            ""actions"": [
                {
                    ""name"": ""ToggleJoin"",
                    ""type"": ""Button"",
                    ""id"": ""42c0a69e-f144-4450-8653-1307b450b2ab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTeam"",
                    ""type"": ""Button"",
                    ""id"": ""80315961-e664-4741-ba26-dcada1fe545a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleReady"",
                    ""type"": ""Button"",
                    ""id"": ""0fac0c70-e6a1-4f23-87fb-df9a763ee6d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeName"",
                    ""type"": ""Button"",
                    ""id"": ""697bfbdd-9079-48c5-9297-067f87e10298"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98e02db1-e17a-4566-aea3-d43e00fdf2dd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleJoin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""562cd9c2-0c97-43c0-89f8-ec9fde1a8668"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTeam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""021df130-772d-49bc-a3a5-18ac9c915f00"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bac975f6-45d4-4612-b1d1-9b451d87ef6b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeName"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""612e0f97-d166-4679-b87b-41c9411ea62b"",
            ""actions"": [
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""86406238-99ac-4757-90a1-a586a8cdb47d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fee34adc-495a-4474-a379-36fb595640a0"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Spin = m_Player.FindAction("Spin", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_CastSpell = m_Player.FindAction("Cast Spell", throwIfNotFound: true);
        // TitleScreen
        m_TitleScreen = asset.FindActionMap("TitleScreen", throwIfNotFound: true);
        m_TitleScreen_StartMatch = m_TitleScreen.FindAction("StartMatch", throwIfNotFound: true);
        // MatchSetup
        m_MatchSetup = asset.FindActionMap("MatchSetup", throwIfNotFound: true);
        m_MatchSetup_ToggleJoin = m_MatchSetup.FindAction("ToggleJoin", throwIfNotFound: true);
        m_MatchSetup_ToggleTeam = m_MatchSetup.FindAction("ToggleTeam", throwIfNotFound: true);
        m_MatchSetup_ToggleReady = m_MatchSetup.FindAction("ToggleReady", throwIfNotFound: true);
        m_MatchSetup_ChangeName = m_MatchSetup.FindAction("ChangeName", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test = m_Test.FindAction("Test", throwIfNotFound: true);
    }

    ~@Inputs()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, Inputs.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TitleScreen.enabled, "This will cause a leak and performance issues, Inputs.TitleScreen.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MatchSetup.enabled, "This will cause a leak and performance issues, Inputs.MatchSetup.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Test.enabled, "This will cause a leak and performance issues, Inputs.Test.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Spin;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_CastSpell;
    public struct PlayerActions
    {
        private @Inputs m_Wrapper;
        public PlayerActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Spin => m_Wrapper.m_Player_Spin;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @CastSpell => m_Wrapper.m_Player_CastSpell;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Spin.started += instance.OnSpin;
            @Spin.performed += instance.OnSpin;
            @Spin.canceled += instance.OnSpin;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @CastSpell.started += instance.OnCastSpell;
            @CastSpell.performed += instance.OnCastSpell;
            @CastSpell.canceled += instance.OnCastSpell;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Spin.started -= instance.OnSpin;
            @Spin.performed -= instance.OnSpin;
            @Spin.canceled -= instance.OnSpin;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @CastSpell.started -= instance.OnCastSpell;
            @CastSpell.performed -= instance.OnCastSpell;
            @CastSpell.canceled -= instance.OnCastSpell;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // TitleScreen
    private readonly InputActionMap m_TitleScreen;
    private List<ITitleScreenActions> m_TitleScreenActionsCallbackInterfaces = new List<ITitleScreenActions>();
    private readonly InputAction m_TitleScreen_StartMatch;
    public struct TitleScreenActions
    {
        private @Inputs m_Wrapper;
        public TitleScreenActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartMatch => m_Wrapper.m_TitleScreen_StartMatch;
        public InputActionMap Get() { return m_Wrapper.m_TitleScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TitleScreenActions set) { return set.Get(); }
        public void AddCallbacks(ITitleScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_TitleScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TitleScreenActionsCallbackInterfaces.Add(instance);
            @StartMatch.started += instance.OnStartMatch;
            @StartMatch.performed += instance.OnStartMatch;
            @StartMatch.canceled += instance.OnStartMatch;
        }

        private void UnregisterCallbacks(ITitleScreenActions instance)
        {
            @StartMatch.started -= instance.OnStartMatch;
            @StartMatch.performed -= instance.OnStartMatch;
            @StartMatch.canceled -= instance.OnStartMatch;
        }

        public void RemoveCallbacks(ITitleScreenActions instance)
        {
            if (m_Wrapper.m_TitleScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITitleScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_TitleScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TitleScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TitleScreenActions @TitleScreen => new TitleScreenActions(this);

    // MatchSetup
    private readonly InputActionMap m_MatchSetup;
    private List<IMatchSetupActions> m_MatchSetupActionsCallbackInterfaces = new List<IMatchSetupActions>();
    private readonly InputAction m_MatchSetup_ToggleJoin;
    private readonly InputAction m_MatchSetup_ToggleTeam;
    private readonly InputAction m_MatchSetup_ToggleReady;
    private readonly InputAction m_MatchSetup_ChangeName;
    public struct MatchSetupActions
    {
        private @Inputs m_Wrapper;
        public MatchSetupActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleJoin => m_Wrapper.m_MatchSetup_ToggleJoin;
        public InputAction @ToggleTeam => m_Wrapper.m_MatchSetup_ToggleTeam;
        public InputAction @ToggleReady => m_Wrapper.m_MatchSetup_ToggleReady;
        public InputAction @ChangeName => m_Wrapper.m_MatchSetup_ChangeName;
        public InputActionMap Get() { return m_Wrapper.m_MatchSetup; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MatchSetupActions set) { return set.Get(); }
        public void AddCallbacks(IMatchSetupActions instance)
        {
            if (instance == null || m_Wrapper.m_MatchSetupActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MatchSetupActionsCallbackInterfaces.Add(instance);
            @ToggleJoin.started += instance.OnToggleJoin;
            @ToggleJoin.performed += instance.OnToggleJoin;
            @ToggleJoin.canceled += instance.OnToggleJoin;
            @ToggleTeam.started += instance.OnToggleTeam;
            @ToggleTeam.performed += instance.OnToggleTeam;
            @ToggleTeam.canceled += instance.OnToggleTeam;
            @ToggleReady.started += instance.OnToggleReady;
            @ToggleReady.performed += instance.OnToggleReady;
            @ToggleReady.canceled += instance.OnToggleReady;
            @ChangeName.started += instance.OnChangeName;
            @ChangeName.performed += instance.OnChangeName;
            @ChangeName.canceled += instance.OnChangeName;
        }

        private void UnregisterCallbacks(IMatchSetupActions instance)
        {
            @ToggleJoin.started -= instance.OnToggleJoin;
            @ToggleJoin.performed -= instance.OnToggleJoin;
            @ToggleJoin.canceled -= instance.OnToggleJoin;
            @ToggleTeam.started -= instance.OnToggleTeam;
            @ToggleTeam.performed -= instance.OnToggleTeam;
            @ToggleTeam.canceled -= instance.OnToggleTeam;
            @ToggleReady.started -= instance.OnToggleReady;
            @ToggleReady.performed -= instance.OnToggleReady;
            @ToggleReady.canceled -= instance.OnToggleReady;
            @ChangeName.started -= instance.OnChangeName;
            @ChangeName.performed -= instance.OnChangeName;
            @ChangeName.canceled -= instance.OnChangeName;
        }

        public void RemoveCallbacks(IMatchSetupActions instance)
        {
            if (m_Wrapper.m_MatchSetupActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMatchSetupActions instance)
        {
            foreach (var item in m_Wrapper.m_MatchSetupActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MatchSetupActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MatchSetupActions @MatchSetup => new MatchSetupActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test;
    public struct TestActions
    {
        private @Inputs m_Wrapper;
        public TestActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test => m_Wrapper.m_Test_Test;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSpin(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnCastSpell(InputAction.CallbackContext context);
    }
    public interface ITitleScreenActions
    {
        void OnStartMatch(InputAction.CallbackContext context);
    }
    public interface IMatchSetupActions
    {
        void OnToggleJoin(InputAction.CallbackContext context);
        void OnToggleTeam(InputAction.CallbackContext context);
        void OnToggleReady(InputAction.CallbackContext context);
        void OnChangeName(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest(InputAction.CallbackContext context);
    }
}
